#!/usr/bin/python3

from __future__ import print_function
from datetime import datetime
from get_docker_secret import get_docker_secret
import CloudFlare
import docker
import os
import re
import logging

DEFAULT_TTL = os.environ.get('DEFAULT_TTL', "1")
SWARM_MODE = os.environ.get('SWARM_MODE', "FALSE")
REFRESH_ENTRIES = os.environ.get('REFRESH_ENTRIES', "FALSE")
TRAEFIK_VERSION = os.environ.get('TRAEFIK_VERSION', "2")
CONTAINER_LOG_LEVEL = os.environ.get('CONTAINER_LOG_LEVEL', "INFO")

# set up logging
logger = logging.getLogger(__name__)
DEBUG = False
VERBOSE = False

if CONTAINER_LOG_LEVEL.upper() == "DEBUG":
    logger.setLevel(logging.DEBUG)
    DEBUG = True

if CONTAINER_LOG_LEVEL.upper() == "VERBOSE":
    logger.setLevel(logging.DEBUG)
    DEBUG = True
    VERBOSE = True

ch = logging.StreamHandler()
formatter = logging.Formatter('[%(levelname)s] %(message)s')
ch.setFormatter(formatter)
logger.addHandler(ch)


def init_doms_from_env():
    RX_DOMS = re.compile('^DOMAIN[0-9]+$', re.IGNORECASE)

    doms = list()
    for k in os.environ:
        if not RX_DOMS.match(k):
            continue

        name = os.environ[k]
        try:
            dom = {
                'name': name,
                'proxied': os.environ.get("{}_PROXIED".format(k), "FALSE").upper() == "TRUE",
                'zone_id': os.environ["{}_ZONE_ID".format(k)],
                'ttl': os.environ.get("{}_TTL".format(k), DEFAULT_TTL),
                'target_domain': os.environ.get("{}_TARGET_DOMAIN".format(k), target_domain),
                'refresh_entry': os.environ.get("{}_REFRESH_ENTRY".format(k), REFRESH_ENTRIES),
                'excluded_sub_domains': list(filter(None, os.environ.get("{}_EXCLUDED_SUB_DOMAINS".format(k), "").split(','))),
            }

            doms.append(dom)

        except KeyError as e:
            logger.error("*** ERROR: {} is not set!".format(e))

    for dom in doms:
        logger.debug("Domain Configuration: %s", dom)
        
    return doms


def isExcluded(name, dom):
    excluded_sub_domains = dom['excluded_sub_domains']

    for sub_dom in excluded_sub_domains:
        
        fqdn_with_sub_dom = sub_dom + '.' + dom['name']
    
        if name.find(fqdn_with_sub_dom) != -1:
            logger.info('Ignoring %s because it falls until excluded sub domain: %s', name, sub_dom)
            return True
        else:
            return False


def point_domain(name, doms):
    for dom in doms:
        if name == dom['target_domain']:
            continue

        if name.find(dom['name']) >= 0:
            if isExcluded(name, dom):
                continue

            records = cf.zones.dns_records.get(dom['zone_id'], params={u'name': name})
            data = {
                u'type': u'CNAME',
                u'name': name,
                u'content': dom['target_domain'],
                u'ttl': dom['ttl'],
                u'proxied': dom['proxied']
            }
            if dom['refresh_entry']:
                try:
                    if len(records) == 0:
                        r = cf.zones.dns_records.post(dom['zone_id'], data=data)
                        logger.info("Created new record: %s to point to %s", name, dom['target_domain'])
                    else:
                        for record in records:
                            cf.zones.dns_records.put(dom['zone_id'], record["id"], data=data)
                            logger.info("Updated existing record: %s to point to %s", name, dom['target_domain'])
                except CloudFlare.exceptions.CloudFlareAPIError as e:
                    pass
            else:
                try:
                    r = cf.zones.dns_records.post(dom['zone_id'], data=data)
                    logger.info("Created new record: %s to point to %s", name, dom['target_domain'])

                except CloudFlare.exceptions.CloudFlareAPIError as e:
                    logger.error('** %s - %d %s' % (name, e, e))


def check_container_t1(c, doms):
    logger.debug("Called check_container_t1 for: %s", c)
    cont_id = c.attrs.get(u'Id')
    for prop in c.attrs.get(u'Config').get(u'Labels'):
        if re.match('traefik.*.frontend.rule', prop):
            value = c.attrs.get(u'Config').get(u'Labels').get(prop)
            if 'Host' in value:
                value = value.split("Host:")[1].strip()
                logger.debug("Container ID:", cont_id, "rule value:", value)
                if ',' in value:
                    for v in value.split(","):
                        logger.info("Found Container ID: %s with Multi-Hostname %s", cont_id, v)
                        point_domain(v, doms)
                else:
                    logger.info("Found Container ID: %s with Hostname %s", cont_id, value)
                    point_domain(value, doms)
            else:
                pass


def check_service_t1(s, doms):
    logger.debug("Called check_service_t1 for: %s", s)
    cont_id = s
    s = client.services.get(s)
    for prop in s.attrs.get(u'Spec').get(u'TaskTemplate').get(u'ContainerSpec').get(u'Labels'):
        if re.match('traefik.*.frontend.rule', prop):
            value = s.attrs.get(u'Spec').get(u'TaskTemplate').get(u'ContainerSpec').get(u'Labels').get(prop)
            if 'Host' in value:
                value = value.split("Host:")[1].strip()
                logger.debug("Service ID: %s rule value: %s", cont_id, value)
                if ',' in value:
                    for v in value.split(","):
                        logger.info("Found Service ID: %s with Multi-Hostname %s", cont_id, v)
                        point_domain(v, doms)
                else:
                    logger.info("Found Service ID: %s with Hostname %s", cont_id, value)
                    point_domain(value, doms)
            else:
                pass


def check_container_t2(c, doms):
    logger.debug("Called check_container_t2 for: %s", c)
    cont_id = c.attrs.get(u'Id')
    for prop in c.attrs.get(u'Config').get(u'Labels'):
        value = c.attrs.get(u'Config').get(u'Labels').get(prop)
        if re.match('traefik.*?\.rule', prop):
            if 'Host' in value:
                logger.debug("Container ID: %s rule value:%s", cont_id, value)
                extracted_domains = re.findall(r'\`([a-zA-Z0-9\.\-]+)\`', value)
                logger.debug("Container ID: %s extracted domains from rule: %s", cont_id, extracted_domains)
                if len(extracted_domains) > 1:
                    for v in extracted_domains:
                        logger.info("Found Service ID: %s with Multi-Hostname %s", cont_id, v)
                        point_domain(v, doms)
                elif len(extracted_domains) == 1:
                    logger.info("Found Service ID: %s with Hostname %s", cont_id, extracted_domains[0])
                    point_domain(extracted_domains[0], doms)
            else:
                pass


def check_service_t2(s, doms):
    logger.debug("Called check_service_t2 for: %s", s)
    cont_id = s
    s = client.services.get(s)
    for prop in s.attrs.get(u'Spec').get(u'Labels'):
        value = s.attrs.get(u'Spec').get(u'Labels').get(prop)
        if re.match('traefik.*?\.rule', prop):
            if 'Host' in value:
                logger.debug("Service ID: %s rule value: %s", cont_id, value)
                extracted_domains = re.findall(r'\`([a-zA-Z0-9\.\-]+)\`', value)
                logger.debug("Service ID: %s extracted domains from rule: %s", cont_id, extracted_domains)
                if len(extracted_domains) > 1:
                    for v in extracted_domains:
                        logger.info("Found Service ID: %s with Multi-Hostname %s", cont_id, v)
                        point_domain(v, doms)
                elif len(extracted_domains) == 1:
                    logger.info("Found Service ID: %s with Hostname %s", cont_id, extracted_domains[0])
                    point_domain(extracted_domains[0], doms)
            else:
                pass


def init(doms):
    logger.debug("Starting Initialization Routines")

    for c in client.containers.list():
        logger.debug("Container List Discovery Loop")
        if TRAEFIK_VERSION == "1":
            check_container_t1(c, doms)
        elif TRAEFIK_VERSION == "2":
            check_container_t2(c, doms)

    if SWARM_MODE:
        logger.debug("Service List Discovery Loop")
        for s in api.services():
            full_serv_id = s["ID"]
            short_serv_id = full_serv_id[:10]
            serv_id = "<Service: " + short_serv_id + ">"
            cont = str(api.containers(quiet=1, filters={'label': 'com.docker.swarm.service.id=' + full_serv_id}))
            full_cont_id = cont[9:-4]
            short_cont_id = full_cont_id[:10]
            cont_id = "<Container: " + short_cont_id + ">"
            if TRAEFIK_VERSION == "1":
                check_service_t1(full_serv_id, doms)
            elif TRAEFIK_VERSION == "2":
                check_service_t2(full_serv_id, doms)
            else:
                pass


try:
    # Check for uppercase docker secrets or env variables
    email = get_docker_secret('CF_EMAIL', autocast_name=False, getenv=True)
    token = get_docker_secret('CF_TOKEN', autocast_name=False, getenv=True)

    # Check for lowercase docker secrets
    if not email:
        email = get_docker_secret('CF_EMAIL', autocast_name=True, getenv=True)
    if not token:
        token = get_docker_secret('CF_TOKEN', autocast_name=True, getenv=True)

    target_domain = os.environ['TARGET_DOMAIN']
    domain = os.environ['DOMAIN1']

except KeyError as e:
    exit("ERROR: {} not defined".format(e))

if REFRESH_ENTRIES.lower() == "true":
    REFRESH_ENTRIES = True
elif REFRESH_ENTRIES.lower() == "false":
    REFRESH_ENTRIES = False

if SWARM_MODE.lower() == "true":
    SWARM_MODE = True
elif SWARM_MODE.lower() == "false":
    SWARM_MODE = False

logger.debug("Swarm Mode: %s", SWARM_MODE)
logger.debug("Refresh Entries: %s", REFRESH_ENTRIES)
logger.debug("Traefik Version: %s", TRAEFIK_VERSION)
logger.debug("Default TTL: %s", DEFAULT_TTL)
if not email:
    logger.debug("API Mode: Scoped")
    cf = CloudFlare.CloudFlare(debug=VERBOSE, token=token)
else:
    logger.debug("API Mode: Global")
    cf = CloudFlare.CloudFlare(debug=VERBOSE, email=email, token=token)

client = docker.from_env()

if SWARM_MODE:
    api = docker.APIClient()

doms = init_doms_from_env()

init(doms)

logger.debug("Starting event watch routines")

t = datetime.now().strftime("%s")

logger.debug("Time: %s", t)

for event in client.events(since=t, filters={'Type': 'service', 'Action': u'update', 'status': u'start'}, decode=True):

    if event.get(u'status') == u'start':
        try:
            if TRAEFIK_VERSION == "1":
                check_container_t1(client.containers.get(event.get(u'id')), doms)
                if SWARM_MODE:
                    check_service_t1(client.services.get(event.get(u'id')), doms)
            elif TRAEFIK_VERSION == "2":
                check_container_t2(client.containers.get(event.get(u'id')), doms)
                if SWARM_MODE:
                    check_service_t2(client.services.get(event.get(u'id')), doms)

        except docker.errors.NotFound as e:
            pass

    if SWARM_MODE:
        if event.get(u'Action') == u'update':
            try:
                if TRAEFIK_VERSION == "1":
                    node_id = event.get(u'Actor').get(u'ID')
                    logger.debug("Detected Update on node: %s", node_id)
                    check_service_t1(node_id, doms)
                elif TRAEFIK_VERSION == "2":
                    node_id = event.get(u'Actor').get(u'ID')
                    service_id = client.services.list()
                    logger.debug("Detected Update on node: %s", node_id)
                    check_service_t2(node_id, doms)

            except docker.errors.NotFound as e:
                pass
